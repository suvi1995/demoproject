pipeline {
    agent any 
    
    tools{
        jdk 'Jdk'
        maven 'Maven'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        registry = '897886641913.dkr.ecr.us-east-1.amazonaws.com/demoproject'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
        HELM_RELEASE_NAME = 'demoproject' 
        HELM_CHART_PATH = './helmchart'  
        NAMESPACE = 'default'
    }
    
    stages{
        
        stage("Git Checkout"){
            steps{
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/suvi1995/demoproject.git'
            }
        }
        
        stage("Compile"){
            steps{
                sh "mvn clean compile"
            }
        }
        
         stage("Test Cases"){
            steps{
                sh "mvn test"
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                    sh " mvn clean package "
                    sh ''' mvn clean verify sonar:sonar \
                       -Dsonar.projectKey=demo \
                       -Dsonar.projectName='demo' \
                       -Dsonar.host.url=http://3.85.126.215:9000 \
                       -Dsonar.token=sqp_64a4c5fe3b41461d42e34e9d1817217b01f50679 '''
            }
        }
        stage("Build"){
            steps{
                sh "mvn clean install"
            }
        }
        stage('Docker Build') {
            steps {
               script {
                  dockerImage = docker.build registry 
                  dockerImage.tag("$BUILD_NUMBER")
              }
            }
        }
        
          stage('Docker Push') {
            steps {
                script {
                  sh'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 897886641913.dkr.ecr.us-east-1.amazonaws.com'
                  sh'docker build -t demoproject .'
                  sh 'docker push 897886641913.dkr.ecr.us-east-1.amazonaws.com/demoproject:$BUILD_NUMBER'
                }
               
            }
        }
        
        
           stage('Setup Kubernetes Credentials') {
            steps {
                withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIAL_ID}", variable: 'KUBECONFIG')]) {
                    sh '''
                        export KUBECONFIG=${KUBECONFIG}
                        kubectl config get-contexts
                    '''
                }
            }
        }
        
    }
}
